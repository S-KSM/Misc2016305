install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("rattle", dependencies = c("Depends", "Suggests"))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library("caret")
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
inTrain <- createDataPartition(y =segmentationOriginal$Case,p = 0.7,list = FALSE)
train <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[- inTrain,]
set.seed("125")
fit <- train(Case ~ .,method="rpart",data=train)
print(fit$finalModel)
library(rattle)
fancyRpartPlot(fit$finalModel)
fit <- train(Class ~ .,method="rpart",data=train)
fancyRpartPlot(fit$finalModel)
library(pgmm)
install.packages("pgmm", dependencies = c("Depends", "Suggests"))
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Area ~ .,method="rpart",data=olive)
fancyRpartPlot(fit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predictions <- predict(fit,newdata = newdata)
predictions
str(olive)
?olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
predictorss <- c("age",obesity,"alcohol","typea","tobacco","ldl")
predictorss <- c("age","obesity","alcohol","typea","tobacco","ldl")
fit <- train(Area ~ predictorss,method="glm",family="binomial",data=trainSA)
fit <- train(chd ~ predictorss,method="glm",family="binomial",data=trainSA)
fit <- train(chd ~ age + obesity + alcohol + typea + tobacco + ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
missClass(testSA$chd, predict(fit, newdata = testSA))
missClass(trainSA$chd, predict(fit, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
fit <- train(y~.,method="rf",data=vowel.train)
varImp(fit)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
fit <- train(y~.,method="rf",data=vowel.train)
varImp(fit)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
install.packages("forecast")
library(forecast)
library(e1071)
data("vowel.train")
data("vowel.test")
head(vowel.train)
set.seed(33833)
rf <- train(y~.,data = vowel.train,method="rf")
my_gbm <- train(y~.,data = vowel.train,method="gbm")
my_gbm
predict(rf,data=vowel.test)
pre_rf <- predict(rf,data=vowel.test)
pre_glm <- predict(my_gbm,data=vowel.test)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- suppressMessages(train(diagnosis~., data=training, method="rf"))
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
rfresult <- predict(rfmodel, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
M1 <- train(CompressiveStrength ~ ., data=training, method="lasso")
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
dat = read.csv(url)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
require(forecast)
M <- bats(tstrain)
M
hat <- forecast(M, length(testing$visitsTumblr))
hat <- cbind(testing, data.frame(hat))
hat$isIn95 <- hat$Lo.95 < hat$visitsTumblr & hat$visitsTumblr < hat$Hi.95
prop.table(table(hat$isIn95))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
M <- svm(CompressiveStrength ~ ., data=training)
testing$hat <- predict(M, testing)
testing$error <- testing$CompressiveStrength - testing$hat
rmse <- sqrt(mean(testing$error ^ 2))
rmse
library(shiny)
library(xlsx)
library(dplyr)
library(caret)
# Read Data
data <- read.xlsx(file = "C:\\Users\\Shobeir\\Downloads\\Ram_Nifty__Data.xlsx",sheetIndex = 1)
data <- data[c(1,2,3,4,5,6,7,8)]
data <- tbl_df(data )
data = data[complete.cases(data),]
inTrain = createDataPartition(data$Swing,p=0.6,list = FALSE)
training <- data[inTrain,]
testing <- data[-inTrain,]
install.packages("minimap")
install.packages("wesanderson")
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("GrandBudapest")) +
theme_gray()
library(wesanderson)
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("GrandBudapest")) +
theme_gray()
names(wes_palette())
names(wes_palettes
)
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("Royal1")) +
theme_gray()
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("Royal2")) +
theme_gray()
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3) +
scale_color_manual(values = wes_palette("Moonrise3")) +
theme_gray()
library(minimap)
determine_color <- function(status){
if(status == "bbs")
"#FFE597"
else if(status == "nl")
"#F1F1F0"
else if (status == "dis")
"#D0C7B9"
else if(status == "bbca")
"#FDC471"
else
"#817972"
}
ssm$color <- as.character(sapply(ssm$Status, determine_color))
ssm_2008 <- ssm[ssm$Year == 2008,]
miniusa(ssm_2008$State, state_colors = ssm_2008$color, state_names = TRUE,
state_name_colors = rep("white", 51))
title(main = "Legal Status of Same Sex Marriage in 2008", line = -1)
ssm_2008
head(ssm)
?ss
?ssm
library(ggplot2)
ggplot(data = quakes, aes(x = lat,y = long,colour = stations)) + geom_point()
g = ggplot(data = quakes,
aes(x = lat,y = long,colour = stations)) +
geom_point()
?theme
g + theme(text = element_text(size = 20))
gbig = g + theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 20),
legend.text = element_text(size = 15),
legend.title = element_text(size = 15))
gbig
gbig = gbig + xlab("Latitude") + ylab("Longitude")
gbig
gbig + ggtitle("Spatial Distribution of Stations")
gbig +
ggtitle("Spatial Distribution of Stations") +
theme(title = element_text(size = 30))
gbigleg_orig = gbig + guides(colour = guide_colorbar(title = "Number of Stations Reporting"))
gbigleg_orig
gbigleg = gbig + guides(colour = guide_colorbar(title = "NumbernofnStationsnReporting"))
gbigleg
gbigleg = gbig + guides(colour = guide_colorbar(title = "Numbernof\nStations\nReporting"))
gbigleg
gbigleg = gbigleg +
guides(colour = guide_colorbar(title = "NumbernofnStationsnReporting",
title.hjust = 0.5))
gbigleg
gbigleg = gbigleg +
guides(colour = guide_colorbar(title = "Number\nof\nStations\nReporting",
title.hjust = 0.5))
gbigleg
gbigleg +
theme(legend.position = c(0.3, 0.35))
transparent_legend =  theme(
legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent",
color = "transparent")
)
gtrans_leg = gbigleg +
theme(legend.position = c(0.3, 0.35)) +
transparent_legend
gtrans_leg
gtrans_leg + guides(colour = guide_colorbar(title.position = "left"))
gtrans_leg + guides(
colour = guide_colorbar(title = "Number\nof\nStations\nReporting",
title.hjust = 0.5,
title.position = "left"))
g + theme_bw()
g = ggplot(aes(y = am), data = mtcars) +
geom_point(position = position_jitter(height = 0.2)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"), se = FALSE) +
geom_smooth(method = "loess", se = FALSE, col = "red")
g
g = ggplot(aes(y = am), data = mtcars) +
geom_point(position = position_jitter(height = 0.2)) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"), se = FALSE) +
geom_smooth(method = "loess", se = FALSE, col = "red")
g
read.csv(file = "C:/Users/Shobeir/Downloads/Wholesurvey/Wholesurvey.csv")
whole_survery =read.csv(file = "C:/Users/Shobeir/Downloads/Wholesurvey/Wholesurvey.csv")
dim(whole_survery)
str(whole_survery)
names(whole_survery)
library(tm)
?tm
??tm
data("crude")
?crude
crude
install.packages("XML")
install.packages("RSQLite")
install.packages("stringr")
install.packages("ggplot2")
install.packages("ggplot2")
library(XML)
library(RSQLite)
library(stringr)
library(ggplot2)
year1 <- 2013
year2 <- 2015
url1 <- paste("http://sports.yahoo.com/nfl/stats/byteam?group=Offense&
cat=Total&conference=NFL&year=season_",year1,"&sort=530&old_cat
egory=Total&old_group=Offense")
url2 <- paste("http://sports.yahoo.com/nfl/stats/byteam?group=Offense&
cat=Total&conference=NFL&year=season_",year2,"&sort=530&old_cat
egory=Total&old_group=Offense")
offense1 <- readHTMLTable(url1, encoding = "UTF-8",
colClasses="character")[[7]]
offense2 <- readHTMLTable(url2, encoding = "UTF-8",
colClasses="character")[[7]]
offense1
head(offense1)
str(offense1)
offense1 <- offense1[,-c(2,4,6,8,10,12,14,16,18,20,22,24,26,28)]
offense1[,1] <- as.character(offense1[,1])
offense1[,2:13] <- apply(offense1[,2:13],2,as.numeric)
offense1[,14] <- as.numeric(substr(offense1[,14], 1, 2))*60 +
as.numeric(substr(offense1[,14], 4, 6))
offense2 <- offense2[,-c(2,4,6,8,10,12,14,16,18,20,22,24,26,28)]
offense2[,1] <- as.character(offense2[,1])
offense2[,2:13] <- apply(offense2[,2:13],2,as.numeric)
offense2[,14] <- as.numeric(substr(offense2[,14], 1, 2))*60 +
as.numeric(substr(offense2[,14], 4, 6))
url3 <- paste("http://sports.yahoo.com/nfl/stats/byteam?group=Defense&
cat=Total&conference=NFL&year=season_",year1,"&sort=530&old_cat
egory=Total&old_group=Defense")
url4 <- paste("http://sports.yahoo.com/nfl/stats/byteam?group=Defense&
cat=Total&conference=NFL&year=season_",year2,"&sort=530&old_cat
egory=Total&old_group=Defense")
defense1 <- readHTMLTable(url3, encoding = "UTF-8",
colClasses="character")[[7]]
defense2 <- readHTMLTable(url4, encoding = "UTF-8",
colClasses="character")[[7]]
defense1 <- defense1[,-c(2,4,6,8,10,12,14,16,18,20,22,24,26)]
defense1[,1] <- as.character(defense1[,1])
defense1[,2:13] <- apply(defense1[,2:13],2,as.numeric)
defense2 <- defense2[,-c(2,4,6,8,10,12,14,16,18,20,22,24,26)]
defense2[,1] <- as.character(defense2[,1])
defense2[,2:13] <- apply(defense2[,2:13],2,as.numeric)
?apply
combined2013 <- merge(offense1, defense1, by.x="Team", by.y="Team")
combined2015 <- merge(offense2, defense2, by.x="Team", by.y="Team")
combined2013 <- merge(offense1, defense1, by.x="Team", by.y="Team")
combined2015 <- merge(offense2, defense2, by.x="Team", by.y="Team")
colnames(combined2013)[2] <- "Games"
colnames(combined2013)[3] <- "OffPPG"
colnames(combined2013)[4] <- "OffYPG"
colnames(combined2013)[5] <- "OffPassYPG"
colnames(combined2013)[6] <- "OffRushYPG"
combined2013$G.y <- NULL
colnames(combined2013)[15] <- "DefPPG"
colnames(combined2013)[16] <- "DefYPG"
colnames(combined2013)[17] <- "DefRushYPG"
colnames(combined2013)[18] <- "DefPassYPG"
colnames(combined2015)[2] <- "Games"
colnames(combined2015)[3] <- "OffPPG"
colnames(combined2015)[4] <- "OffYPG"
colnames(combined2015)[5] <- "OffPassYPG"
colnames(combined2015)[6] <- "OffRushYPG"
combined2015$G.y <- NULL
colnames(combined2015)[15] <- "DefPPG"
colnames(combined2015)[16] <- "DefYPG"
colnames(combined2015)[17] <- "DefRushYPG"
colnames(combined2015)[18] <- "DefPassYPG"
par(nfrow = c(2,1))
par(mfrow = c(2,1))
hist(combined2013$OffPPG, breaks=10, main="Offensive Points Per
Game", xlab="Offensive PPG",ylab="Number of Teams")
hist(combined2015$OffPPG, breaks=10, main="Offensive Points Per
Game", xlab="Offensive PPG",ylab="Number of Teams")
par(mfrow = c(2,1))
hist(combined2013$OffPPG, breaks=15, main="Offensive Points Per
Game 2013", xlab="Offensive PPG",ylab="Number of Teams")
hist(combined2015$OffPPG, breaks=15, main="Offensive Points Per
Game 2015", xlab="Offensive PPG",ylab="Number of Teams")
mean(combined2013$OffPPG)
sd(combined2013$OffPPG)
mean(combined2015$OffPPG)
sd(combined2015$OffPPG)
ppg <- transform(combined2013,Team=reorder(Team,combined2013$OffPPG))
ggplot(ppg,aes(x=Team, y=OffPPG)) +
geom_bar(stat='identity',color="black",fill="blue") +
coord_flip() + labs(x="Team",y="Avg Points per Game") +
ggtitle("Avg Points per Game") + theme(plot.title =
element_text(size=18, face="bold"))
ppg <- transform(combined2015,Team=reorder(Team,combined2015$OffPPG))
ggplot(ppg,aes(x=Team, y=OffPPG)) +
geom_bar(stat='identity',color="black",fill="blue") +
coord_flip() + labs(x="Team",y="Avg Points per Game") +
ggtitle("Avg Points per Game") + theme(plot.title =
element_text(size=18, face="bold"))
ypg <- transform(combined2013,Team=reorder(Team,-combined2013$DefYPG))
ggplot(ypg,aes(x=Team, y=DefYPG)) +
geom_bar(stat='identity',color="black",fill="blue") +
coord_flip() + labs(x="Team",y="Avg Yards Allowed per Game") +
ggtitle("Avg Yards Allowed per Game") + theme(plot.title =
element_text(size=18, face="bold"))
ypg <- transform(combined2015,Team=reorder(Team,-combined2015$DefYPG))
ggplot(ypg,aes(x=Team, y=DefYPG)) +
geom_bar(stat='identity',color="black",fill="blue") +
coord_flip() + labs(x="Team",y="Avg Yards Allowed per Game") +
ggtitle("Avg Yards Allowed per Game") + theme(plot.title =
element_text(size=18, face="bold"))
setwd("C:/Users/Shobeir/Desktop/Fiverr/20160305/thebuddy/")
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
hist(myfile$WeekDay,labels = c("Sun","Mon","Tue","Wed","Thu","Fri","Sat"),breaks = 8,
xlab = "WeekDay",ylab = "Number of Sales")
library(dplyr)
mydata = tbl_df(myfile)
?group_by
group_by(mydata,WeekDay) %>% summarise(n = sum(n))
mydatag <- group_by(mydata,WeekDay)
summarise(mydatag,n = sum(n))
mydatag
summarise(mydatag,n = n()
)
summarise(mydatag,n = n())
inshort = summarise(mydatag,n = n())
inshort$WeekDay = as.factor(x = inshort$WeekDay,labels(c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
inshort$WeekDay = as.factor(x = as.character(inshort$WeekDay))
inshort
inshort = summarise(mydatag,n = n())
within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat"))
)
setwd("C:/Users/Shobeir/Desktop/Fiverr/20160305/thebuddy/")
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
hist(myfile$WeekDay,labels = c("Sun","Mon","Tue","Wed","Thu","Fri","Sat"),breaks = 8,
xlab = "WeekDay",ylab = "Number of Sales")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.csv2(x = inshort,file = "Summary.csv")
within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat"))
)
plot(x = inshort$WeekDay,y = inshort$n)
barplot(x = inshort$WeekDay,y = inshort$n,)
barplot(x = inshort$WeekDay,y = inshort$n)
barplot(inshort$n)
barplot(inshort$n,names.arg = inshort$WeekDay)
barplot(inshort$n,names.arg = inshort$WeekDay,angle = 45)
barplot(inshort$n,names.arg = inshort$WeekDay,angle = "45")
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.csv2(x = inshort,file = "Summary.csv")
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.csv2(x = inshort,file = "Summary.csv",sep = ',',quote = FALSE)
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.csv2(x = inshort,file = "Summary.csv",sep = ',',quote = FALSE)
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.csv2(x = inshort,file = "Summary.csv",sep = ",",quote = FALSE)
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.table(x = inshort,file = "Summary.csv",sep = ",",quote = FALSE)
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
library(dplyr)
mydata = tbl_df(myfile)
mydatag <- group_by(mydata,WeekDay)
inshort = summarise(mydatag,n = n())
inshort = within(inshort, WeekDay <- factor(WeekDay, labels=c("Sun", "Mon", "Tue","Wed","Thu", "Fri","Sat")))
write.table(x = inshort,file = "Summary.csv",sep = ",",quote = FALSE,row.names = FALSE)
barplot(inshort$n,names.arg = inshort$WeekDay,col = inshort$WeekDay)
dev.copy(png,file = "WeekDay.png")
dev.off()
myfile = read.csv2(file = "ExcelFileFiverr.csv",sep = ",")
myfile$Date.Sold
myfile$Date.Sold[0]
myfile$Date.Sold[1]
library(lubridate)
wday(as.Date(myfile$Date.Sold))
split(myfile$Date.Sold,",")
